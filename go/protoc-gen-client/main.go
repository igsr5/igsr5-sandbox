package main

import (
	"bytes"
	"encoding/json"
	"go/format"
	"io"
	"io/ioutil"
	"log"
	"os"
	"text/template"

	"github.com/golang/protobuf/proto"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	plugin "github.com/golang/protobuf/protoc-gen-go/plugin"
	"github.com/pkg/errors"
	"golang.org/x/tools/imports"
)

func main() {
	err := run()
	if err != nil {
		log.Fatalf("failed to run() %v", err)
	}
}

func run() error {
	req, err := parseReq(os.Stdin)
	if err != nil {
		return errors.Wrap(err, "failed to parse request")
	}

	resp, err := processReq(req)
	if err != nil {
		return errors.Wrap(err, "failed to process request")
	}

	err = emitResp(resp)
	if err != nil {
		return errors.Wrap(err, "failed to emitResp")
	}

	return nil
}

func parseReq(r io.Reader) (*plugin.CodeGeneratorRequest, error) {
	buf, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, errors.Wrap(err, "failed to read request")
	}

	req := &plugin.CodeGeneratorRequest{}
	err = proto.Unmarshal(buf, req)
	if err != nil {
		return nil, errors.Wrap(err, "failed to unmarshal request")
	}

	return req, nil
}

func processReq(req *plugin.CodeGeneratorRequest) (*plugin.CodeGeneratorResponse, error) {
	files := make(map[string]*descriptor.FileDescriptorProto)
	for _, f := range req.ProtoFile {
		files[f.GetName()] = f
	}
	t, err := template.New("test").Parse(genTmpl)
	if err != nil {
		return nil, errors.Wrap(err, "failed to parse template")
	}

	var dfsBytes = make([][]byte, 0, len(files))
	for _, f := range files {
		fbyte, err := json.Marshal(*f)
		if err != nil {
			return nil, errors.Wrap(err, "failed to marshal file")
		}

		dfsBytes = append(dfsBytes, fbyte)
	}

	// out := strings.TrimPrefix(fmt.Sprintf("%s.go", k), "src/")
	var out = "gen.go"
	var buf bytes.Buffer

	err = t.Execute(&buf, GenData{DfsBytes: dfsBytes})
	if err != nil {
		return nil, errors.Wrap(err, "failed to execute template")
	}

	formatedBuf, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatalf("failed to format source: %v", err)
	}

	importedFormatedBuf, err := imports.Process("gen.go", formatedBuf, nil)
	if err != nil {
		log.Fatalf("failed to process imports: %v", err)
	}

	var resp plugin.CodeGeneratorResponse
	resp.File = append(resp.File, &plugin.CodeGeneratorResponse_File{
		Name:    proto.String(out),
		Content: proto.String(string(importedFormatedBuf)),
	})

	return &resp, nil
}

func emitResp(resp *plugin.CodeGeneratorResponse) error {
	buf, err := proto.Marshal(resp)
	if err != nil {
		return errors.Wrap(err, "failed to marshal response")
	}

	_, err = os.Stdout.Write(buf)
	if err != nil {
		return errors.Wrap(err, "failed to write response")
	}

	return nil
}

type GenData struct {
	DfsBytes [][]byte
}

var genTmpl = `
// Code generated by protoc-gen-client. DO NOT EDIT.

package main

import (
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
)

var dfs []*descriptor.FileDescriptorProto

func init() {
  dfs = make([]*descriptor.FileDescriptorProto, 0, {{len .DfsBytes }})
  var err error

  {{ range $i, $dfsByte := .DfsBytes }}
    byte__FileDescriptorProto__{{ $i }} := []byte{ {{ range $dfsByte }} {{ . }}, {{ end }} }
    f__{{ $i }} := &descriptor.FileDescriptorProto{}
    err = json.Unmarshal(byte__FileDescriptorProto__{{ $i }}, f__{{ $i  }})
    if err != nil {
      log.Fatalf("failed to unmarshal file: %v", err)
    }

    dfs = append(dfs, f__{{ $i }})

  {{ end }}
}


func FileDescriptors() ([]*desc.FileDescriptor, error) {
	var descFiles = make([]*desc.FileDescriptor, 0, len(dfs))
	for _, df := range dfs {
		f, err := desc.CreateFileDescriptor(df, &desc.FileDescriptor{})
		if err != nil {
			return nil, errors.Wrap(err, "failed to create file descriptor")
		}

		descFiles = append(descFiles, f)
	}

	return descFiles, nil
}
`
