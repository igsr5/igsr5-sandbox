package main

import (
	"bytes"
	"encoding/json"
	"go/format"
	"io"
	"io/ioutil"
	"log"
	"os"
	"text/template"

	"github.com/golang/protobuf/proto"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	plugin "github.com/golang/protobuf/protoc-gen-go/plugin"
	"github.com/pkg/errors"
	"golang.org/x/tools/imports"
)

func main() {
	err := run()
	if err != nil {
		log.Fatalf("failed to run() %v", err)
	}
}

func run() error {
	req, err := parseReq(os.Stdin)
	if err != nil {
		return errors.Wrap(err, "failed to parse request")
	}

	resp, err := processReq(req)
	if err != nil {
		return errors.Wrap(err, "failed to process request")
	}

	err = emitResp(resp)
	if err != nil {
		return errors.Wrap(err, "failed to emitResp")
	}

	return nil
}

func parseReq(r io.Reader) (*plugin.CodeGeneratorRequest, error) {
	buf, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, errors.Wrap(err, "failed to read request")
	}

	req := &plugin.CodeGeneratorRequest{}
	err = proto.Unmarshal(buf, req)
	if err != nil {
		return nil, errors.Wrap(err, "failed to unmarshal request")
	}

	return req, nil
}

func processReq(req *plugin.CodeGeneratorRequest) (*plugin.CodeGeneratorResponse, error) {
	files := make(map[string]*descriptor.FileDescriptorProto, len(req.ProtoFile))
	for _, f := range req.ProtoFile {
		files[f.GetName()] = f
	}
	t, err := template.New("test").Parse(genTmpl)
	if err != nil {
		return nil, errors.Wrap(err, "failed to parse template")
	}

	var resp plugin.CodeGeneratorResponse
	for _, f := range files {
		// out := strings.TrimPrefix(fmt.Sprintf("%s.go", k), "src/")
		out := "gen.go"
		var buf bytes.Buffer

		data, err := json.Marshal(*f)
		if err != nil {
			return nil, errors.Wrap(err, "failed to marshal file")
		}

		err = t.Execute(&buf, data)
		if err != nil {
			return nil, errors.Wrap(err, "failed to execute template")
		}

		formatedBuf, err := format.Source(buf.Bytes())
		if err != nil {
			log.Fatalf("failed to format source: %v", err)
		}

		importedFormatedBuf, err := imports.Process("gen.go", formatedBuf, nil)
		if err != nil {
			log.Fatalf("failed to process imports: %v", err)
		}

		resp.File = append(resp.File, &plugin.CodeGeneratorResponse_File{
			Name:    proto.String(out),
			Content: proto.String(string(importedFormatedBuf)),
		})
	}

	return &resp, nil
}

func emitResp(resp *plugin.CodeGeneratorResponse) error {
	buf, err := proto.Marshal(resp)
	if err != nil {
		return errors.Wrap(err, "failed to marshal response")
	}

	_, err = os.Stdout.Write(buf)
	if err != nil {
		return errors.Wrap(err, "failed to write response")
	}

	return nil
}

var genTmpl = `
package main

import (
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
)

// Code generated by protoc-gen-dump. DO NOT EDIT.
func main() {
  byte__FileDescriptorProto := []byte{ {{ range . }} {{ . }}, {{ end }} }
  f := &descriptor.FileDescriptorProto{}
  err := json.Unmarshal(byte__FileDescriptorProto, f)
  if err != nil {
    log.Fatalf("failed to unmarshal file: %v", err)
  }

  fmt.Printf("%+v", f)
}
`
